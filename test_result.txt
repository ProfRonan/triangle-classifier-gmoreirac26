============================= test session starts ==============================
platform linux -- Python 3.10.10, pytest-7.3.1, pluggy-1.0.0
rootdir: /home/seuronao/Documents/Triangle Classifier-04-24-2023-04-46-29/gmoreirac26
collected 12 items

test_main.py .....F...FFF                                                [100%]

=================================== FAILURES ===================================
_________________________ test_isósceles[test_input2] __________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f4da5114df0>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["2", "2", "3"],
            ["3", "2", "2"],
            ["2", "3", "2"],
        ],
    )
    def test_isósceles(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        assert "Não é um triângulo" not in mocked_stdout.getvalue().strip()
        assert "Equilátero" not in mocked_stdout.getvalue().strip()
>       assert "Isósceles" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Isósceles' in 'Escaleno'
E        +  where 'Escaleno' = <built-in method strip of str object at 0x7f4da513fe70>()
E        +    where <built-in method strip of str object at 0x7f4da513fe70> = 'Escaleno\n'.strip
E        +      where 'Escaleno\n' = <built-in method getvalue of _io.StringIO object at 0x7f4da5149cf0>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7f4da5149cf0> = <_io.StringIO object at 0x7f4da5149cf0>.getvalue

test_main.py:56: AssertionError
_____________________ test_não_é_um_triângulo[test_input0] _____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f4da5105f00>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["1", "2", "3"],
            ["1", "3", "2"],
            ["3", "1", "2"],
        ],
    )
    def test_não_é_um_triângulo(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert "Não é um triângulo" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Não é um triângulo' in 'o triangulo não pode existir'
E        +  where 'o triangulo não pode existir' = <built-in method strip of str object at 0x7f4da5145450>()
E        +    where <built-in method strip of str object at 0x7f4da5145450> = 'o triangulo não pode existir\n'.strip
E        +      where 'o triangulo não pode existir\n' = <built-in method getvalue of _io.StringIO object at 0x7f4da514add0>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7f4da514add0> = <_io.StringIO object at 0x7f4da514add0>.getvalue

test_main.py:104: AssertionError
_____________________ test_não_é_um_triângulo[test_input1] _____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f4da52d33a0>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["1", "2", "3"],
            ["1", "3", "2"],
            ["3", "1", "2"],
        ],
    )
    def test_não_é_um_triângulo(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert "Não é um triângulo" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Não é um triângulo' in 'o triangulo não pode existir'
E        +  where 'o triangulo não pode existir' = <built-in method strip of str object at 0x7f4da5145ae0>()
E        +    where <built-in method strip of str object at 0x7f4da5145ae0> = 'o triangulo não pode existir\n'.strip
E        +      where 'o triangulo não pode existir\n' = <built-in method getvalue of _io.StringIO object at 0x7f4da514ab90>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7f4da514ab90> = <_io.StringIO object at 0x7f4da514ab90>.getvalue

test_main.py:104: AssertionError
_____________________ test_não_é_um_triângulo[test_input2] _____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f4da5105fc0>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["1", "2", "3"],
            ["1", "3", "2"],
            ["3", "1", "2"],
        ],
    )
    def test_não_é_um_triângulo(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert "Não é um triângulo" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Não é um triângulo' in 'o triangulo não pode existir'
E        +  where 'o triangulo não pode existir' = <built-in method strip of str object at 0x7f4da5146170>()
E        +    where <built-in method strip of str object at 0x7f4da5146170> = 'o triangulo não pode existir\n'.strip
E        +      where 'o triangulo não pode existir\n' = <built-in method getvalue of _io.StringIO object at 0x7f4da514b010>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7f4da514b010> = <_io.StringIO object at 0x7f4da514b010>.getvalue

test_main.py:104: AssertionError
=========================== short test summary info ============================
FAILED test_main.py::test_isósceles[test_input2] - AssertionError: assert 'Is...
FAILED test_main.py::test_não_é_um_triângulo[test_input0] - AssertionError: a...
FAILED test_main.py::test_não_é_um_triângulo[test_input1] - AssertionError: a...
FAILED test_main.py::test_não_é_um_triângulo[test_input2] - AssertionError: a...
========================= 4 failed, 8 passed in 0.06s ==========================
